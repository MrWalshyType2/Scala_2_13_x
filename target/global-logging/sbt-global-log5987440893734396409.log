[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\morga\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\morga\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.1 (Amazon.com Inc. Java 1.8.0_265)
[debug]       Load.loadUnit: plugins took 117.3547ms
[debug]       Load.loadUnit: defsScala took 0.4287ms
[debug] [Loading] Scanning directory C:\Users\morga\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\morga\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 25.6776 ms
[debug]           Load.resolveProject(global-plugins) took 63.5405ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\morga\.sbt\1.0\plugins, plugins: List(<none>))) took 255.1882ms
[debug] [Loading] Done in C:\Users\morga\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 275.0185ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5035ms
[debug]     Load.loadUnit(file:/C:/Users/morga/.sbt/1.0/plugins/, ...) took 401.3772ms
[debug]   Load.apply: load took 573.6403ms
[debug]   Load.apply: resolveProjects took 7.5578ms
[debug]   Load.apply: finalTransforms took 77.6395ms
[debug]   Load.apply: config.delegates took 9.1621ms
[debug]   Load.apply: Def.make(settings)... took 778.2965ms
[debug]   Load.apply: structureIndex took 80.2432ms
[debug]   Load.apply: mkStreams took 1.2501ms
[info] loading global plugins from C:\Users\morga\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2753.869ms
[debug]           Load.loadUnit: plugins took 29.6686ms
[debug]           Load.loadUnit: defsScala took 0.0025ms
[debug] [Loading] Scanning directory C:\Users\morga\Documents\QA\SCALA_2_13_x\project
[debug]             Load.loadUnit: mkEval took 5.262ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\morga\Documents\QA\SCALA_2_13_x\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7745 ms
[info] loading settings for project scala_2_13_x-build from plugins.sbt,idea.sbt ...
[debug]               Load.resolveProject(scala_2_13_x-build) took 7.4089ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala_2_13_x-build, base: C:\Users\morga\Documents\QA\SCALA_2_13_x\project, plugins: List(<none>))) took 9.6933ms
[debug] [Loading] Done in C:\Users\morga\Documents\QA\SCALA_2_13_x\project, returning: (scala_2_13_x-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1807.275ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.9779ms
[debug]         Load.loadUnit(file:/C:/Users/morga/Documents/QA/SCALA_2_13_x/project/, ...) took 1846.9905ms
[debug]       Load.apply: load took 1848.408ms
[debug]       Load.apply: resolveProjects took 0.0826ms
[debug]       Load.apply: finalTransforms took 5.4759ms
[debug]       Load.apply: config.delegates took 0.2937ms
[debug]       Load.apply: Def.make(settings)... took 71.6582ms
[debug]       Load.apply: structureIndex took 21.2371ms
[debug]       Load.apply: mkStreams took 0.0026ms
[info] loading project definition from C:\Users\morga\Documents\QA\SCALA_2_13_x\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 4592.1283ms
[debug]     Load.loadUnit: defsScala took 0.0019ms
[debug] [Loading] Scanning directory C:\Users\morga\Documents\QA\SCALA_2_13_x
[debug]       Load.loadUnit: mkEval took 0.3046ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\morga\Documents\QA\SCALA_2_13_x, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.2034 ms
[info] loading settings for project scala_2_13_x from build.sbt ...
[debug]         Load.resolveProject(scala_2_13_x) took 22.9618ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scala_2_13_x, base: C:\Users\morga\Documents\QA\SCALA_2_13_x, plugins: List(<none>))) took 25.0563ms
[debug] [Loading] Done in C:\Users\morga\Documents\QA\SCALA_2_13_x, returning: (scala_2_13_x)
[debug]     Load.loadUnit: loadedProjectsRaw took 1230.8977ms
[debug]     Load.loadUnit: cleanEvalClasses took 25.1421ms
[debug]   Load.loadUnit(file:/C:/Users/morga/Documents/QA/SCALA_2_13_x/, ...) took 5848.7003ms
[debug] Load.apply: load took 5850.6441ms
[debug] Load.apply: resolveProjects took 0.0954ms
[debug] Load.apply: finalTransforms took 20.7661ms
[debug] Load.apply: config.delegates took 0.3138ms
[debug] Load.apply: Def.make(settings)... took 62.5045ms
[debug] Load.apply: structureIndex took 17.1999ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to SCALA_2_13_x (in build file:/C:/Users/morga/Documents/QA/SCALA_2_13_x/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60224 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60224, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SCALA_2_13_x (in build file:/C:/Users/morga/Documents/QA/SCALA_2_13_x/)
[debug] > Exec(idea-shell, None, None)
